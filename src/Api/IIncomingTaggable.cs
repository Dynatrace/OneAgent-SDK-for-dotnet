//
// Copyright 2019 Dynatrace LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

namespace Dynatrace.OneAgent.Sdk.Api
{
    /// <summary>
    /// Common interface to allow incoming requests to be linked to outgoing requests via tags.
    /// </summary>
    public interface IIncomingTaggable
    {
        /// <summary>
        /// Sets a tag retrieved from an <see cref="IOutgoingTaggable"/> tracer using <see cref="IOutgoingTaggable.GetDynatraceStringTag"/>.
        /// A tag can only be set *before* a tracer is started.
        /// 
        /// To allow tracing across process and technology boundaries, tracers can be supplied with so-called tags.
        /// Tags are strings or byte arrays generated by the SDK that enable Dynatrace to trace a transaction end-to-end.
        /// The user has to take care of transporting the tag from one process/service to the other.
        /// 
        /// At most one tag can be set for each tracer. Calling this method more than once will therefore overwrite any
        /// tag that was set by either <see cref="SetDynatraceByteTag(byte[])"/> or <see cref="SetDynatraceStringTag(string)"/>
        /// (unless the tracer was already started, in which case any further changes are ignored).
        /// </summary>
        /// <param name="tag">if null or an empty string, the incoming tag will be reset (cleared)</param>
        void SetDynatraceStringTag(string tag);

        /// <summary>
        /// Same as <see cref="SetDynatraceStringTag(string)"/> but tag is passed in binary format
        /// as returned by <see cref="IOutgoingTaggable.GetDynatraceByteTag"/>
        /// A tag can only be set *before* a tracer is started.
        /// </summary>
        /// <param name="tag">if null or an empty array, the incoming tag will be reset (cleared).</param>
        void SetDynatraceByteTag(byte[] tag);
    }
}
